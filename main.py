class Task:
    """Класс Task описывает отдельную задачу в трекере."""

    def __init__(self, title, description, due_date):
        """
        Инициализация задачи с заголовком, описанием, датой выполнения и статусом.
        """
        self.title = title  # Название задачи
        self.description = description  # Описание задачи
        self.due_date = due_date  # Дата выполнения задачи
        self.completed = False  # Изначально задача не завершена.

    def mark_complete(self):
        """Метод для отметки задачи как завершенной."""
        self.completed = True  # Устанавливаем статус задачи как выполненный

    def __str__(self):
        """Метод для строкового представления задачи."""
        # Определяем статус задачи для отображения
        status = "Выполнена" if self.completed else "В ожидании"
        # Формируем строку с информацией о задаче
        return f"{self.title} - {status}\nДата завершения: {self.due_date}\nОписание: {self.description}"


class TaskTracker:
    """Класс TaskTracker представляет трекер задач, который управляет списком задач."""

    def __init__(self):
        """Инициализация пустого списка для хранения задач."""
        self.tasks = []  # Список задач

    def add_task(self, title, description, due_date):
        """Метод для добавления новой задачи в список."""
        # Создаем новую задачу и добавляем её в список задач
        task = Task(title, description, due_date)
        self.tasks.append(task)
        # Подтверждение добавления задачи
        print(f"Задача '{title}' успешно добавлена.")

    def remove_task(self, title):
        """Метод для удаления задачи по её названию."""
        # Ищем задачу с указанным названием
        for task in self.tasks:
            if task.title == title:
                # Если задача найдена, удаляем её из списка
                self.tasks.remove(task)
                print(f"Задача '{title}' успешно удалена.")
                return
        # Если задача не найдена, выводим соответствующее сообщение
        print(f"Задача '{title}' не найдена.")

    def view_tasks(self):
        """Метод для просмотра всех задач в трекере."""
        # Проверяем, есть ли задачи в списке
        if not self.tasks:
            # Если список задач пуст, выводим сообщение
            print("Список задач пуст.")
            return
        # Если задачи есть, выводим каждую из них
        for task in self.tasks:
            print(task)  # Вывод информации о задаче через метод __str__
            print("-" * 40)  # Разделитель между задачами для удобства чтения

    def mark_task_complete(self, title):
        """Метод для отметки задачи как завершенной по её названию."""
        # Ищем задачу с указанным названием
        for task in self.tasks:
            if task.title == title:
                # Если задача найдена, отмечаем её как завершенную
                task.mark_complete()
                print(f"Задача '{title}' отмечена как выполненная.")
                return
        # Если задача не найдена, выводим соответствующее сообщение
        print(f"Задача '{title}' не найдена.")


def main():
    """Основная функция для работы с пользователем через консольный интерфейс."""
    # Создаем экземпляр трекера задач
    tracker = TaskTracker()
    
    # Бесконечный цикл для работы с пользователем, пока он не выберет выход
    while True:
        # Вывод меню для выбора действия
        print("\nЛичный Трекер Задач")
        print("1. Добавить задачу")
        print("2. Удалить задачу")
        print("3. Просмотреть все задачи")
        print("4. Отметить задачу как выполненную")
        print("5. Выйти")

        # Получаем выбор пользователя
        choice = input("Выберите действие: ")
        
        if choice == "1":
            # Добавление новой задачи с запросом данных у пользователя
            title = input("Введите название задачи: ")
            description = input("Введите описание задачи: ")
            due_date = input("Введите дату выполнения (ГГГГ-ММ-ДД): ")
            tracker.add_task(title, description, due_date)
        
        elif choice == "2":
            # Удаление задачи по названию, указанному пользователем
            title = input("Введите название задачи для удаления: ")
            tracker.remove_task(title)
        
        elif choice == "3":
            # Просмотр всех задач в трекере
            tracker.view_tasks()
        
        elif choice == "4":
            # Отметка задачи как выполненной по названию, указанному пользователем
            title = input("Введите название задачи для отметки как выполненной: ")
            tracker.mark_task_complete(title)
        
        elif choice == "5":
            # Завершение программы
            print("Выход из программы. До свидания!")
            break
        
        else:
            # Обработка неверного ввода
            print("Неверный выбор. Пожалуйста, попробуйте снова.")


# Запускаем основную функцию, если скрипт выполняется напрямую
if __name__ == "__main__":
    main()
